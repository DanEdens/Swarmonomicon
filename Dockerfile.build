FROM rust:slim-bullseye as builder

WORKDIR /usr/src/swarmonomicon

# Install build dependencies including x86_64-linux-gnu toolchain
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libcurl4-openssl-dev \
    cmake \
    gcc \
    g++ \
    libc6-dev \
    git \
    gcc-x86-64-linux-gnu \
    g++-x86-64-linux-gnu \
    && rm -rf /var/lib/apt/lists/*

# Set linker for x86_64 target
ENV CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc

# Copy manifests
COPY Cargo.toml Cargo.lock ./

# Create dummy source
RUN mkdir -p src/bin
RUN echo 'fn main() { println!("Hello, world!"); }' > src/main.rs
RUN echo 'pub fn add(a: i32, b: i32) -> i32 { a + b }' > src/lib.rs
RUN echo 'fn main() { println!("Swarm"); }' > src/bin/swarm.rs
RUN echo 'fn main() { println!("Todo Worker"); }' > src/bin/todo_worker.rs
RUN echo 'fn main() { println!("MCP Todo Server"); }' > src/bin/mcp_todo_server.rs
RUN echo 'fn main() { println!("Test MCP Todo Publish"); }' > src/bin/test_mcp_todo_publish.rs
RUN echo 'fn main() { println!("Train Flappy"); }' > src/bin/train_flappy.rs

# Set the target platform
ENV RUSTFLAGS="-C target-feature=+crt-static"

# Build dependencies for x86_64 platform
RUN rustup target add x86_64-unknown-linux-gnu
RUN cargo build --release --target x86_64-unknown-linux-gnu

# Remove the dummy source
RUN rm -rf src

# Copy the actual source code
COPY . .

# Build the binaries for x86_64 platform
RUN cargo build --release --target x86_64-unknown-linux-gnu

# Copy the binaries to an output directory
RUN mkdir -p /output && \
    find /usr/src/swarmonomicon/target/x86_64-unknown-linux-gnu/release -maxdepth 1 -type f -executable \
    -not -name "*.d" -not -name "*.rlib" -not -name "*.so" -not -name "*.dylib" \
    -not -name "*.dll" -not -name "*.a" -not -name "build" \
    -exec cp {} /output/ \; 
