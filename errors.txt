   Compiling swarmonomicon v0.1.1 (/Users/d.edens/lab/madness_interactive/projects/common/Swarmonomicon)
error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:187:20
    |
187 | async fn main() -> Result<(), dyn Error> {
    |                    ^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
  --> src/bin/swarm.rs:79:21
   |
79 |             }).await?;
   |                     ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
   = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
  --> src/bin/swarm.rs:81:59
   |
81 |             git.update_working_dir(std::env::current_dir()?.into())?;
   |                                                           ^ the trait `From<std::io::Error>` is not implemented for `dyn std::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
   = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
  --> src/bin/swarm.rs:81:68
   |
81 |             git.update_working_dir(std::env::current_dir()?.into())?;
   |                                                                    ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
   = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
  --> src/bin/swarm.rs:82:65
   |
82 |             reg.register("git".to_string(), Box::new(git)).await?;
   |                                                                 ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
   = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
  --> src/bin/swarm.rs:95:75
   |
95 |             reg.register("haiku".to_string(), Box::new(haiku_agent)).await?;
   |                                                                           ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
   = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:121:75
    |
121 |         reg.register("greeter".to_string(), Box::new(greeter_agent)).await?;
    |                                                                           ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:123:5
    |
123 |     Ok(())
    |     ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by a bound in `Ok`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by this bound in `Ok`
...
532 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:64:1
    |
64  | async fn initialize_registry() -> Result<(), dyn Error> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:134:76
    |
134 |     let response = service.process_message(Message::new(git_message)).await?;
    |                                                                            ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:138:87
    |
138 |         service.process_message(Message::new(format!("branch {}", branch_name))).await?;
    |                                                                                       ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:142:88
    |
142 |         service.process_message(Message::new(format!("merge {}", target_branch))).await?;
    |                                                                                        ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:145:5
    |
145 |     Ok(())
    |     ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by a bound in `Ok`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by this bound in `Ok`
...
532 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:126:1
    |
126 | async fn handle_git_command(service: &mut TransferService, message: Option<String>, branch: Option<String>, merge: Option<String>) -> Result<(), dyn Error> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:152:77
    |
152 |     let response = service.process_message(Message::new(init_message)).await?;
    |                                                                             ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:155:5
    |
155 |     Ok(())
    |     ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by a bound in `Ok`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by this bound in `Ok`
...
532 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:148:1
    |
148 | async fn handle_init_command(service: &mut TransferService, project_type: String, name: String, description: String) -> Result<(), dyn Error> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:177:47
    |
177 |         std::io::stdin().read_line(&mut input)?;
    |                                               ^ the trait `From<std::io::Error>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, std::io::Error>>`

error[E0277]: `?` couldn't convert the error to `dyn std::error::Error`
   --> src/bin/swarm.rs:180:62
    |
180 |         let response = service.process_message(message).await?;
    |                                                              ^ the trait `From<Box<dyn std::error::Error + Send + Sync>>` is not implemented for `dyn std::error::Error`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the trait `FromResidual<Result<Infallible, E>>` is implemented for `Result<T, F>`
    = note: required for `Result<(), dyn std::error::Error>` to implement `FromResidual<Result<Infallible, Box<dyn std::error::Error + Send + Sync>>>`

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:158:1
    |
158 | async fn interactive_mode(service: &mut TransferService, registry: Arc<RwLock<agents::AgentRegistry>>) -> Result<(), dyn Error> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: the size for values of type `(dyn std::error::Error + 'static)` cannot be known at compilation time
   --> src/bin/swarm.rs:194:27
    |
194 |     initialize_registry().await?;
    |                           ^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `(dyn std::error::Error + 'static)`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:194:5
    |
194 |     initialize_registry().await?;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
    = note: required for `Result<(), dyn std::error::Error>` to implement `Try`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:194:32
    |
194 |     initialize_registry().await?;
    |                                ^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:200:5
    |
200 | /     match cli.command {
201 | |         Some(Commands::Git { message, branch, merge }) => {
202 | |             // TODO: Implement handle_git_command
203 | |             println!("Git command not yet implemented");
...   |
213 | |     }
214 | |     Ok(())
    | |__________^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by an implicit `Sized` bound in `Result`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by the implicit `Sized` requirement on this type parameter in `Result`

error[E0277]: the size for values of type `dyn std::error::Error` cannot be known at compilation time
   --> src/bin/swarm.rs:214:5
    |
214 |     Ok(())
    |     ^^^^^^ doesn't have a size known at compile-time
    |
    = help: the trait `Sized` is not implemented for `dyn std::error::Error`
note: required by a bound in `Ok`
   --> /Users/d.edens/.rustup/toolchains/stable-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/result.rs:528:20
    |
528 | pub enum Result<T, E> {
    |                    ^ required by this bound in `Ok`
...
532 |     Ok(#[stable(feature = "rust1", since = "1.0.0")] T),
    |     -- required by a bound in this tuple variant

For more information about this error, try `rustc --explain E0277`.
error: could not compile `swarmonomicon` (bin "swarm" test) due to 25 previous errors
