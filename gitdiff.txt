diff --git a/src/bin/swarm.rs b/src/bin/swarm.rs
index ea122fe..4185f07 100644
--- a/src/bin/swarm.rs
+++ b/src/bin/swarm.rs
@@ -7,6 +7,7 @@ use std::error::Error;
 use std::sync::Arc;
 use tokio::sync::RwLock;
 use std::io::Write;
+use swarmonomicon::error::SwarmError;
 
 #[cfg(feature = "git-agent")]
 use swarmonomicon::agents::git_assistant::GitAssistantAgent;
@@ -60,7 +61,7 @@ enum Commands {
 
 // TODO: Refactor error handling to use a custom error type that can be returned from all fallible functions.
 // TODO: Fix the `dyn Error` size warnings and handle error conversions properly.
-async fn initialize_registry() -> Result<(), Box<dyn std::error::Error>> {
+async fn initialize_registry() -> Result<(), dyn Error> {
     let registry = agents::GLOBAL_REGISTRY.clone();
     {
         let mut reg = registry.write().await;
@@ -122,7 +123,7 @@ async fn initialize_registry() -> Result<(), Box<dyn std::error::Error>> {
     Ok(())
 }
 
-async fn handle_git_command(service: &mut TransferService, message: Option<String>, branch: Option<String>, merge: Option<String>) -> Result<(), Box<dyn std::error::Error>> {
+async fn handle_git_command(service: &mut TransferService, message: Option<String>, branch: Option<String>, merge: Option<String>) -> Result<(), dyn Error> {
     service.set_current_agent("git".to_string());
 
     let git_message = match message {
@@ -144,7 +145,7 @@ async fn handle_git_command(service: &mut TransferService, message: Option<Strin
     Ok(())
 }
 
-async fn handle_init_command(service: &mut TransferService, project_type: String, name: String, description: String) -> Result<(), Box<dyn std::error::Error>> {
+async fn handle_init_command(service: &mut TransferService, project_type: String, name: String, description: String) -> Result<(), dyn Error> {
     service.set_current_agent("project".to_string());
 
     let init_message = format!("create {} {} '{}'", project_type, name, description);
@@ -154,7 +155,7 @@ async fn handle_init_command(service: &mut TransferService, project_type: String
     Ok(())
 }
 
-async fn interactive_mode(service: &mut TransferService, registry: Arc<RwLock<agents::AgentRegistry>>) -> Result<(), Box<dyn std::error::Error>> {
+async fn interactive_mode(service: &mut TransferService, registry: Arc<RwLock<agents::AgentRegistry>>) -> Result<(), dyn Error> {
     println!("ðŸŒŸ Welcome to the Quantum Swarm CLI! ðŸŒŸ");
     println!("Available agents:");
 
@@ -183,7 +184,7 @@ async fn interactive_mode(service: &mut TransferService, registry: Arc<RwLock<ag
 }
 
 #[tokio::main]
-async fn main() -> Result<(), Box<dyn std::error::Error>> {
+async fn main() -> Result<(), dyn Error> {
     // Initialize logging
     tracing_subscriber::fmt::init();
 
diff --git a/src/error.rs b/src/error.rs
index ee86a9a..898c0e9 100644
--- a/src/error.rs
+++ b/src/error.rs
@@ -1,47 +1,34 @@
 use std::error::Error as StdError;
 use std::fmt;
 
-#[derive(Debug)]
+#[derive(Debug, thiserror::Error)]
 pub enum Error {
-    Io(std::io::Error),
-    Json(serde_json::Error),
+    #[error("I/O error: {0}")]
+    Io(#[from] std::io::Error),
+
+    #[error("JSON error: {0}")]
+    Json(#[from] serde_json::Error),
+
+    #[error("Agent error: {0}")]
     Agent(String),
+
+    #[error("Tool error: {0}")]
     Tool(String),
-    State(String),
-}
 
-impl fmt::Display for Error {
-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
-        match self {
-            Error::Io(err) => write!(f, "IO error: {}", err),
-            Error::Json(err) => write!(f, "JSON error: {}", err),
-            Error::Agent(msg) => write!(f, "Agent error: {}", msg),
-            Error::Tool(msg) => write!(f, "Tool error: {}", msg),
-            Error::State(msg) => write!(f, "State error: {}", msg),
-        }
-    }
+    #[error("State error: {0}")]
+    State(String),
 }
 
-impl StdError for Error {
-    fn source(&self) -> Option<&(dyn StdError + 'static)> {
-        match self {
-            Error::Io(err) => Some(err),
-            Error::Json(err) => Some(err),
-            _ => None,
-        }
-    }
-}
+#[derive(Debug, thiserror::Error)]
+pub enum SwarmError {
+    #[error("Agent error: {0}")]
+    Agent(String),
 
-impl From<std::io::Error> for Error {
-    fn from(err: std::io::Error) -> Self {
-        Error::Io(err)
-    }
-}
+    #[error("Tool error: {0}")]
+    Tool(String),
 
-impl From<serde_json::Error> for Error {
-    fn from(err: serde_json::Error) -> Self {
-        Error::Json(err)
-    }
+    #[error("State error: {0}")]
+    State(String),
 }
 
 impl From<&str> for Error {
@@ -54,4 +41,20 @@ impl From<String> for Error {
     fn from(msg: String) -> Self {
         Error::Agent(msg)
     }
-} 
+}
+
+impl From<SwarmError> for Error {
+    fn from(err: SwarmError) -> Self {
+        match err {
+            SwarmError::Agent(msg) => Error::Agent(msg),
+            SwarmError::Tool(msg) => Error::Tool(msg),
+            SwarmError::State(msg) => Error::State(msg),
+        }
+    }
+}
+
+impl From<Box<dyn std::error::Error + Send + Sync>> for Error {
+    fn from(err: Box<dyn std::error::Error + Send + Sync>) -> Self {
+        Error::Agent(err.to_string())
+    }
+}
